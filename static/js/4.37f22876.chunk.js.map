{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuotesDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","AddedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuotesDetails","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.37f22876.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3eZJp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3GRiI\",\"loading\":\"NewCommentForm_loading__xFrE0\",\"control\":\"NewCommentForm_control__3rvdF\",\"actions\":\"NewCommentForm_actions__3kynx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1B8y8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1NNBO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__EbRM6\"};","import { useRef, useEffect } from \"react\";\n\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const {onAddedComment} = props;\n\n\n  useEffect(()=>{\n    if(status==='completed' && !error){\n      onAddedComment();\n    }\n  },[status,error, onAddedComment])\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: { text: enteredText}, quoteId:props.quoteId} );\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n   \n  const AddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if(status ===\"completed\" && (loadedComments || loadedComments.length >0)){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n  if(status===\"completed\" && (!loadedComments || loadedComments.length ===0)){\n    comments = <p className = \"centered\">No Comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={AddedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route } from \"react-router\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n\r\nconst QuotesDetails = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n  const{quoteId} = params;\r\n  const{sendRequest, status, data:loadedQuote, error}=useHttp(getSingleQuote, true);\r\n\r\n  useEffect(()=>{\r\n    sendRequest(quoteId);  \r\n  }, [sendRequest,quoteId])\r\n  if(status===\"pending\"){\r\n    return <div className=\"centered\">\r\n      <LoadingSpinner/>\r\n    </div>\r\n  }\r\n  if(error){\r\n    return <div className=\"centered\">\r\n      <p>{error}</p>\r\n    </div>\r\n  }\r\n  if(!loadedQuote.text){\r\n    return <div className=\"centered\">\r\n      <p>No Quote  Found</p>\r\n    </div>\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>Details Page</h1>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      \r\n      <Route path={`${match.path}`} exact>\r\n\r\n      <div className=\"centered\">\r\n        <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n          Load Comments\r\n        </Link>\r\n      </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuotesDetails;\r\n"],"sourceRoot":""}