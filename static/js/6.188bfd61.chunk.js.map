{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuotes","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyD/BC,EArDG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQC,KAAMF,EAAYG,QAAS,SAACC,GAAD,MAAY,yEAC/C,cAAC,EAAD,UACE,uBACEC,QARiB,WACvBJ,GAAc,IAQRV,UAAWC,IAAQc,KACnBC,SAvBR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBd,EAAee,QAAQC,MACvCC,EAAcf,EAAaa,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAY5C,UAKGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK5B,OAEtC,sBAAKL,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK1B,OAEpC,qBAAKP,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QA9BU,WAC1B1B,GAAc,IA6BkCV,UAAU,MAAlD,kC,gBC5BGqC,UAjBG,WACd,MAA4BC,YAAQC,KAA7BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OACdC,EAAUC,cAChBC,qBAAU,WACM,cAATH,GACCC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAOZ,OAAO,cAAC,EAAD,CAAYhB,UAAoB,YAATe,EAAoBlB,WAN1B,SAAAuB,GAGpBN,EAAYM","file":"static/js/6.188bfd61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3ezIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2Cy3G\",\"loading\":\"QuoteForm_loading__3By0B\",\"control\":\"QuoteForm_control__FeAD0\",\"actions\":\"QuoteForm_actions__2pwaS\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const finishEnteringHandler=()=>{\n    setIsEntering(false);\n  }\n  const FormFocusHandler = () => {\n    setIsEntering(true);\n  };\n  return (\n    <Fragment>\n      <Prompt when={isEntering} message={(location)=>'Are You Sure You want to leave? All your entered data will be lost!'}/>\n      <Card>\n        <form\n          onFocus={FormFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick= {finishEnteringHandler}className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport {addQuote} from '../lib/api';\r\n\r\nconst NewQuotes = ()=>{\r\n    const {sendRequest, status}=useHttp(addQuote);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(status==='completed'){\r\n            history.push('/quotes'); //go back allow\r\n        }\r\n    }, [status, history])\r\n    const addQuoteHandler = quoteData =>{\r\n        \r\n       \r\n        sendRequest(quoteData);\r\n       // history.replace();\r\n    }\r\n    return <QuoteForm  isLoading={status===\"pending\"} onAddQuote={addQuoteHandler} />\r\n};\r\n\r\nexport default NewQuotes;"],"sourceRoot":""}